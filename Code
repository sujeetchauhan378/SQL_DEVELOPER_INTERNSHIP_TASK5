-- =============================
-- Task 5: SQL Joins
-- =============================

-- Drop existing tables for a clean run
DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS customers;

-- Create Customers table
CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  name VARCHAR(50),
  city VARCHAR(50)
);

-- Create Orders table
CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT NULL,
  order_date DATE,
  amount DECIMAL(10,2),
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Insert Customers
INSERT INTO customers (customer_id, name, city) VALUES
(1, 'Alice', 'Delhi'),
(2, 'Bob',   'Mumbai'),
(3, 'Cara',  'Pune'),
(4, 'Dan',   'Jaipur'); -- Dan has no orders

-- Insert Orders
INSERT INTO orders (order_id, customer_id, order_date, amount) VALUES
(101, 1, '2025-08-01', 1200.00),
(102, 1, '2025-08-02',  800.00),
(103, 2, '2025-08-03',  500.00),
(104, NULL, '2025-08-04', 300.00); -- guest/unknown customer

-- ====================================
-- 1. INNER JOIN
-- ====================================
SELECT c.customer_id, c.name, o.order_id, o.amount
FROM customers c
INNER JOIN orders o
  ON c.customer_id = o.customer_id;

-- ====================================
-- 2. LEFT JOIN
-- ====================================
SELECT c.customer_id, c.name, o.order_id, o.amount
FROM customers c
LEFT JOIN orders o
  ON c.customer_id = o.customer_id;

-- ====================================
-- 3. RIGHT JOIN (MySQL)
-- ====================================
SELECT c.customer_id, c.name, o.order_id, o.amount
FROM customers c
RIGHT JOIN orders o
  ON c.customer_id = o.customer_id;

-- SQLite Workaround for RIGHT JOIN:
-- SELECT c.customer_id, c.name, o.order_id, o.amount
-- FROM orders o
-- LEFT JOIN customers c
--   ON c.customer_id = o.customer_id;

-- ====================================
-- 4. FULL OUTER JOIN
-- ====================================
-- PostgreSQL Syntax:
-- SELECT c.customer_id, c.name, o.order_id, o.amount
-- FROM customers c
-- FULL OUTER JOIN orders o
--   ON c.customer_id = o.customer_id;

-- MySQL / SQLite Workaround:
SELECT c.customer_id, c.name, o.order_id, o.amount
FROM customers c
LEFT JOIN orders o
  ON c.customer_id = o.customer_id
UNION
SELECT c.customer_id, c.name, o.order_id, o.amount
FROM orders o
LEFT JOIN customers c
  ON c.customer_id = o.customer_id;

-- ====================================
-- 5. CROSS JOIN Example
-- ====================================
SELECT c.name, d.order_date
FROM customers c
CROSS JOIN (SELECT DISTINCT order_date FROM orders) d;

-- ====================================
-- 6. Self-Join Example (if referrer_id existed)
-- ====================================
-- SELECT c.name AS customer, r.name AS referrer
-- FROM customers c
-- LEFT JOIN customers r ON c.referrer_id = r.customer_id;
